import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import java.security.MessageDigest

plugins {
	id 'java'
	id 'application'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
	id 'org.graalvm.buildtools.native' version '0.10.6'
}

repositories {
    mavenCentral()
}

ext {
	// These are used in dependencies {} and baked in Version.java on build
	versionSqlite = '3.49.1.0'
	versionHtmlflow = '4.6'
	versionSqlBuilder = '3.0.2'
	versionJavaWebSocket = '1.6.0'
	versionSpringSecurityCrypto = '6.4.5'
	versionOpenhtmltopdf = '1.1.26'
	versionOpenPDF = '2.0.3'
	versionBatik = '1.19'
}

dependencies {
	implementation group: 'org.xerial', name: 'sqlite-jdbc', version: versionSqlite
	implementation group: 'com.github.xmlet', name: 'htmlflow', version: versionHtmlflow
	implementation group: 'com.healthmarketscience.sqlbuilder', name: 'sqlbuilder', version: versionSqlBuilder
	implementation group: 'org.java-websocket', name: 'Java-WebSocket', version: versionJavaWebSocket
	implementation group: 'org.springframework.security', name: 'spring-security-crypto', version: versionSpringSecurityCrypto

	implementation group: 'io.github.openhtmltopdf', name: 'openhtmltopdf-core', version: versionOpenhtmltopdf
	implementation group: 'io.github.openhtmltopdf', name: 'openhtmltopdf-pdfbox', version: versionOpenhtmltopdf
	implementation group: 'io.github.openhtmltopdf', name: 'openhtmltopdf-svg-support', version: versionOpenhtmltopdf
	implementation group: 'com.github.librepdf', name: 'openpdf', version: versionOpenPDF
	implementation group: 'org.apache.xmlgraphics', name: 'batik', version: versionBatik

	implementation group: 'org.slf4j', name: 'slf4j-nop', version: '2.0.13' // htmlflow uses slf4j
}

/*javafx {
	version = "17"
	modules = [ 'javafx.controls', 'javafx.fxml' ]
}

tasks.withType(JavaExec) { // Needed to debug JavaFX
	// https://www.javafixing.com/2022/06/fixed-how-to-generate-javafx-jar-from.html
	if (System.getProperty('DEBUG', 'false') == 'true') {
		jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9999'
	}
}*/

sourceSets {
	main {
		java {
			exclude 'lto/manager/gui/*' // Exclude JavaFX
		}
	}
}

def gitCommand = { String[] cmd ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine cmd
        standardOutput = stdout
    }
    return stdout.toString().replace("\n", "").replace("\r", "").trim()
}

def getVersionNumber = { ->
	final versionTag = gitCommand(new String[]{"git", "tag", "--points-at", "HEAD"})
	if (versionTag.equals("")) {
		return "Dev-Build"
	} else {
		return versionTag;
	}
}

application {
	mainClass.set("lto.manager.web.MainWeb")
}

jar {
   manifest { // Add git tag to manifest
       attributes 'Version': getVersionNumber()
   }
}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

def version = project.projectDir.toString() + "/src/main/java/lto/manager/Version.java"
def versionBackup = version + ".bak"

// Before compile edit Version.java file
compileJava.doFirst {
	if (new File(version).readLines().get(0).equals("// build.gradle")) {
		// This is not original version has been modified by previous build
		project.logger.lifecycle("${version} was not restored from previous build, reverted")
		gitCommand(new String[]{"git", "checkout", "--", version}) // Revert
	}

	new File(versionBackup).bytes = new File(version).bytes // Backup file
	project.logger.lifecycle("Create dynamic version class: ${version}")

	final formattedDate = new Date().format('yyyy-MM-dd HH:mm:ss')
	final ln = System.getProperty('line.separator')

	File file = new File(version)
	file.write "// build.gradle${ln}" // Comment in file to show has been edited by script
	new File(versionBackup).eachLine { line ->
		// Go through each line and replace Strings with real values
		if (line.contains('VERSION = "UNDEFINED";')) {
			def tag = gitCommand(new String[]{"git", "tag", "--points-at", "HEAD"})
			if ("".equals(tag)) tag = "Untagged"
			project.logger.lifecycle("Version: ${tag}")
			file << line.replace("UNDEFINED", tag) << ln

		} else if (line.contains('BRANCH = "UNDEFINED\";')) {
			def branch = gitCommand(new String[]{"git", "branch"}).replace("* ", "")
			project.logger.lifecycle("Branch : ${branch}")
			file << line.replace("UNDEFINED", branch) << ln

		} else if (line.contains('COMMIT_HASH = "UNDEFINED";')) {
			def hash = gitCommand(new String[]{"git", "rev-parse", "--short", "HEAD"});
			project.logger.lifecycle("Hash   : ${hash}")
			file << line.replace("UNDEFINED", hash) << ln

		} else if (line.contains('BUILD_DATE = "UNDEFINED";')) {
			project.logger.lifecycle("Date   : ${formattedDate}")
			file << line.replace("UNDEFINED", formattedDate) << ln

		} else if (line.contains('DEPENDENCIES')) {
			def sql = "\"SQLite\",\"${versionSqlite}\",\"https://github.com/xerial/sqlite-jdbc\""
			def sqlbuild = "\"SqlBuilder\",\"${versionSqlBuilder}\",\"https://github.com/jahlborn/sqlbuilder\""
			def html = "\"HtmlFlow\",\"${versionHtmlflow}\",\"https://github.com/xmlet/HtmlFlow\""
			def websocket = "\"Java-WebSocket\",\"${versionJavaWebSocket}\",\"https://github.com/TooTallNate/Java-WebSocket\""
			def sec = "\"Spring Security Crypto\",\"${versionSpringSecurityCrypto}\",\"https://github.com/spring-projects/spring-security\""
			def pdf = "\"Open HTML to PDF\",\"${versionOpenhtmltopdf}\",\"https://github.com/openhtmltopdf/openhtmltopdf\""
			def pdfo = "\"OpenPDF\",\"${versionOpenPDF}\",\"https://github.com/LibrePDF/OpenPDF\""
			def batik = "\"Batik\",\"${versionBatik}\",\"https://github.com/apache/xmlgraphics-batik\""
			def breeze = "\"KDE Breeze Icons\",\"5.80.0\",\"https://github.com/KDE/breeze-icons\""
			def bootstrap = "\"Bootstrap Icons\",\"1.11.0\",\"https://icons.getbootstrap.com/\""
			file << line.replace('"UNDEFINED", "UNDEFINED", "UNDEFINED"', "${sql},${sqlbuild},${html},${websocket},${sec},${pdf},${pdfo},${batik},${breeze},${bootstrap}") << ln

		} else {
			file << line << ln
		}
	}
}

// After compile restore original file
compileJava.doLast {
	new File(version).bytes = new File(versionBackup).bytes
	delete(versionBackup)
}

shadowJar {
	def jarName = "openltom-${getVersionNumber()}"
	def gradleMajorVersion = project.getGradle().getGradleVersion().substring(0, 1);

	// minimize()
	archiveBaseName = jarName
	if (gradleMajorVersion == "7") {
		classifier = null // Gradle 7
	} else {
		archiveClassifier = null // Gradle 8
	}
	archiveVersion = null

	doLast {
		copy { // Move jar file to root of build dir
			from "build/libs/${jarName}.jar"
			into "build/"
		}
		delete("build/libs/${jarName}.jar")

		// Calculate checksum
		def builtJar = project.projectDir.toString() + "/build/${jarName}.jar"
		def checksum = MessageDigest.getInstance("SHA256").digest(new File(builtJar).bytes).encodeHex().toString()
		new File("${builtJar}.sha256").text = "${checksum} ${jarName}.jar"
	}
}
